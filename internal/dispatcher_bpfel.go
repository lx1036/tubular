// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package internal

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDispatcher returns the embedded CollectionSpec for dispatcher.
func loadDispatcher() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DispatcherBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dispatcher: %w", err)
	}

	return spec, err
}

// loadDispatcherObjects loads dispatcher and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *dispatcherObjects
//     *dispatcherPrograms
//     *dispatcherMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDispatcherObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDispatcher()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dispatcherSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dispatcherSpecs struct {
	dispatcherProgramSpecs
	dispatcherMapSpecs
}

// dispatcherSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dispatcherProgramSpecs struct {
	AccessCtxSk             *ebpf.ProgramSpec `ebpf:"access_ctx_sk"`
	CtxNarrowAccess         *ebpf.ProgramSpec `ebpf:"ctx_narrow_access"`
	Dispatcher              *ebpf.ProgramSpec `ebpf:"dispatcher"`
	LookupDrop              *ebpf.ProgramSpec `ebpf:"lookup_drop"`
	LookupPass              *ebpf.ProgramSpec `ebpf:"lookup_pass"`
	MultiProgDrop1          *ebpf.ProgramSpec `ebpf:"multi_prog_drop1"`
	MultiProgDrop2          *ebpf.ProgramSpec `ebpf:"multi_prog_drop2"`
	MultiProgPass1          *ebpf.ProgramSpec `ebpf:"multi_prog_pass1"`
	MultiProgPass2          *ebpf.ProgramSpec `ebpf:"multi_prog_pass2"`
	MultiProgRedir1         *ebpf.ProgramSpec `ebpf:"multi_prog_redir1"`
	MultiProgRedir2         *ebpf.ProgramSpec `ebpf:"multi_prog_redir2"`
	RedirIp4                *ebpf.ProgramSpec `ebpf:"redir_ip4"`
	RedirIp6                *ebpf.ProgramSpec `ebpf:"redir_ip6"`
	RedirPort               *ebpf.ProgramSpec `ebpf:"redir_port"`
	ReuseportDrop           *ebpf.ProgramSpec `ebpf:"reuseport_drop"`
	ReuseportPass           *ebpf.ProgramSpec `ebpf:"reuseport_pass"`
	SelectSockA             *ebpf.ProgramSpec `ebpf:"select_sock_a"`
	SelectSockA_noReuseport *ebpf.ProgramSpec `ebpf:"select_sock_a_no_reuseport"`
	SelectSockB             *ebpf.ProgramSpec `ebpf:"select_sock_b"`
	SkAssignEexist          *ebpf.ProgramSpec `ebpf:"sk_assign_eexist"`
	SkAssignEsocknosupport  *ebpf.ProgramSpec `ebpf:"sk_assign_esocknosupport"`
	SkAssignNull            *ebpf.ProgramSpec `ebpf:"sk_assign_null"`
	SkAssignReplaceFlag     *ebpf.ProgramSpec `ebpf:"sk_assign_replace_flag"`
}

// dispatcherMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dispatcherMapSpecs struct {
	Bindings           *ebpf.MapSpec `ebpf:"bindings"`
	DestinationMetrics *ebpf.MapSpec `ebpf:"destination_metrics"`
	Destinations       *ebpf.MapSpec `ebpf:"destinations"`
	RedirMap           *ebpf.MapSpec `ebpf:"redir_map"`
	RunMap             *ebpf.MapSpec `ebpf:"run_map"`
	Sockets            *ebpf.MapSpec `ebpf:"sockets"`
}

// dispatcherObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDispatcherObjects or ebpf.CollectionSpec.LoadAndAssign.
type dispatcherObjects struct {
	dispatcherPrograms
	dispatcherMaps
}

func (o *dispatcherObjects) Close() error {
	return _DispatcherClose(
		&o.dispatcherPrograms,
		&o.dispatcherMaps,
	)
}

// dispatcherMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDispatcherObjects or ebpf.CollectionSpec.LoadAndAssign.
type dispatcherMaps struct {
	Bindings           *ebpf.Map `ebpf:"bindings"`
	DestinationMetrics *ebpf.Map `ebpf:"destination_metrics"`
	Destinations       *ebpf.Map `ebpf:"destinations"`
	RedirMap           *ebpf.Map `ebpf:"redir_map"`
	RunMap             *ebpf.Map `ebpf:"run_map"`
	Sockets            *ebpf.Map `ebpf:"sockets"`
}

func (m *dispatcherMaps) Close() error {
	return _DispatcherClose(
		m.Bindings,
		m.DestinationMetrics,
		m.Destinations,
		m.RedirMap,
		m.RunMap,
		m.Sockets,
	)
}

// dispatcherPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDispatcherObjects or ebpf.CollectionSpec.LoadAndAssign.
type dispatcherPrograms struct {
	AccessCtxSk             *ebpf.Program `ebpf:"access_ctx_sk"`
	CtxNarrowAccess         *ebpf.Program `ebpf:"ctx_narrow_access"`
	Dispatcher              *ebpf.Program `ebpf:"dispatcher"`
	LookupDrop              *ebpf.Program `ebpf:"lookup_drop"`
	LookupPass              *ebpf.Program `ebpf:"lookup_pass"`
	MultiProgDrop1          *ebpf.Program `ebpf:"multi_prog_drop1"`
	MultiProgDrop2          *ebpf.Program `ebpf:"multi_prog_drop2"`
	MultiProgPass1          *ebpf.Program `ebpf:"multi_prog_pass1"`
	MultiProgPass2          *ebpf.Program `ebpf:"multi_prog_pass2"`
	MultiProgRedir1         *ebpf.Program `ebpf:"multi_prog_redir1"`
	MultiProgRedir2         *ebpf.Program `ebpf:"multi_prog_redir2"`
	RedirIp4                *ebpf.Program `ebpf:"redir_ip4"`
	RedirIp6                *ebpf.Program `ebpf:"redir_ip6"`
	RedirPort               *ebpf.Program `ebpf:"redir_port"`
	ReuseportDrop           *ebpf.Program `ebpf:"reuseport_drop"`
	ReuseportPass           *ebpf.Program `ebpf:"reuseport_pass"`
	SelectSockA             *ebpf.Program `ebpf:"select_sock_a"`
	SelectSockA_noReuseport *ebpf.Program `ebpf:"select_sock_a_no_reuseport"`
	SelectSockB             *ebpf.Program `ebpf:"select_sock_b"`
	SkAssignEexist          *ebpf.Program `ebpf:"sk_assign_eexist"`
	SkAssignEsocknosupport  *ebpf.Program `ebpf:"sk_assign_esocknosupport"`
	SkAssignNull            *ebpf.Program `ebpf:"sk_assign_null"`
	SkAssignReplaceFlag     *ebpf.Program `ebpf:"sk_assign_replace_flag"`
}

func (p *dispatcherPrograms) Close() error {
	return _DispatcherClose(
		p.AccessCtxSk,
		p.CtxNarrowAccess,
		p.Dispatcher,
		p.LookupDrop,
		p.LookupPass,
		p.MultiProgDrop1,
		p.MultiProgDrop2,
		p.MultiProgPass1,
		p.MultiProgPass2,
		p.MultiProgRedir1,
		p.MultiProgRedir2,
		p.RedirIp4,
		p.RedirIp6,
		p.RedirPort,
		p.ReuseportDrop,
		p.ReuseportPass,
		p.SelectSockA,
		p.SelectSockA_noReuseport,
		p.SelectSockB,
		p.SkAssignEexist,
		p.SkAssignEsocknosupport,
		p.SkAssignNull,
		p.SkAssignReplaceFlag,
	)
}

func _DispatcherClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed dispatcher_bpfel.o
var _DispatcherBytes []byte
